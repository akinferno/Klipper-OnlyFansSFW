#########################################
# !!! UPDATE WITH YOUR PRINTER INFO !!! #
################ Bed Fan ################

[fan_generic BedFans]
pin: gpio17  			
max_power: 1.0
#cycle_time: 0.05		# Doesn't seem to be needed
#kick_start_time: 0.5


#################################################
# PART FAN MANAGEMENT - Allow global adjustment #
#################################################

[gcode_macro PART_FAN_VARS]
variable_fan_multiplier: 1.0
gcode:


[gcode_macro SET_FAN_MULTIPLIER]
gcode:
    {% set MULTIPLIER = params.MULTIPLIER|default(1.0)|float %}
    SET_GCODE_VARIABLE MACRO=PART_FAN_VARS VARIABLE=fan_multiplier VALUE={MULTIPLIER}


[gcode_macro M106]
rename_existing: M106.1
gcode:
    {% set S = params.S|default(0)|int %}
    {% set P = params.P|default(0)|int %}
    {% set MULTIPLIER = printer["gcode_macro PART_FAN_VARS"].fan_multiplier %}
    {% set ADJUSTED_S = (S * MULTIPLIER)|round(0)|int %}
    M106.1 P{P} S{ADJUSTED_S}

#########################################
#             BED FAN MANAGEMENT        #
#########################################

[gcode_macro _BEDFANVARS]
variable_threshold: 90		# If bed temp target is above this threshold, fans turn on slow, until target reached, then turn on fast.
variable_fanthreshold: 50	# AKInferno Added: If set above this, fans stay off.
variable_slowthreshold: 75	# AKInferno Added: if the bed temp target is above this threshold, fans turn on and stay slow.
variable_fast: 0.80		# Current of fast Fan speed
variable_slow: 0.25		# Current of slow Fan speed (while bed is heating / for targets below top threshold / fan speed during cooldown 
variable_offthreshold: 45  	# AKInferno Added: run fan after bed is turned off, until the bed temp falls below this temp.
gcode:


########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
    {% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
    SET_FAN_SPEED FAN=BedFans SPEED={SLOW}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=SLOW) %}

[gcode_macro BEDFANSFAST]
gcode:
    {% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
    SET_FAN_SPEED FAN=BedFans SPEED={FAST}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=FAST) %}


[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0
	{% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=0) %}


############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	{% set SLOWTHRESHOLD = printer["gcode_macro _BEDFANVARS"].slowthreshold|int %}
	{% set FANTHRESHOLD = printer["gcode_macro _BEDFANVARS"].fanthreshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
        {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(hotend_temp=S) %}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
        {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_temp=S) %}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% elif TARGET >= SLOWTHRESHOLD %}	# added this to Ellis' original config to turn fans on low, but not start the monitoring loop for targets in PLA/PETG range. 
			BEDFANSSLOW
		{% elif TARGET >= FANTHRESHOLD %}	# added this to Ellis' original config to turn fans on low, but not start the monitoring loop for targets in PLA/PETG range. 
			RESPOND TYPE=echo MSG='Target is {TARGET}, bedfans left off'
		{% else %}
			TURN_OFF_HEATERS
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW														# >= Threshold temp: Low speed fans while heating 
	{% else %}
		TURN_OFF_HEATERS														# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
        bed_temp
        {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_temp=S) %}
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_temp=S) %}


# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	_TURN_OFF_HEATERS											# Turn off heaters
 	{% if printer.heater_bed.temperature|int >= printer["gcode_macro _BEDFANVARS"].offthreshold %}		# If bed temp is above Off Theshold, start timer for bedfan for 5min and shutdown heaters
		UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=300	
	{% endif %}

################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	{% set COOLDOWN = printer["gcode_macro _BEDFANVARS"].offthreshold %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST										# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% elif printer.heater_bed.target == 0 %}								# If TARGET is 0 (So fans turned off)
		{% if printer.heater_bed.temperature|int >= COOLDOWN %}							# AND if Bed temperature is above Off Threshold
			BEDFANSSLOW												# Set to slow fanspeed
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=300								# start timer to check again in 5 min
		{% else %}
			BEDFANSOFF					# TARGET is 0 and bed temp is < Off Threshold turn Filter off and don't restart timer
		{% endif %}
	{% endif %}


#########################################
#     CHAMBER MANAGEMENT CONTROLS       #
#########################################

[gcode_macro CHAMBER_MANAGER]
variable_bed_temp: 0
variable_hotend_temp: 0
variable_chamber_temp: 0
variable_target_chamber_temp: 0
variable_exhaust_fan_speed: 0
variable_hotend_temp: 0
variable_bed_fan_speed: 0
variable_surface_temp_delta: 1.1
variable_heatsoak_duration: 900000     # 15 min
variable_bed_fan_min: 0.25
variable_bed_fan_max: 1.0
variable_exhaust_fan_min: 0.25
variable_exhaust_fan_max: 1.0
gcode:
    # This macro is called by other macros and doesn't execute directly


[gcode_macro M141]
description: This is how gcode for chamber temp are managed by the slicer.
gcode:
    {% set S = params.S|default(0)|int %}
    {% set CURRENT_CHAMBER_TEMP = printer["temperature_sensor chamber"].temperature %}
    {% set BED_TEMP = printer.heater_bed.temperature|int %}
    {% set HOTEND_TEMP = printer.extruder.temperature|int %}

    # Home and center toolhead
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    
    {% if S == 0 %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        SET_FAN_SPEED FAN=BedFans SPEED=0.2
        RESPOND TYPE=echo MSG="Bedfans to run for 5min then turn off."
        G4 P300000
        SET_FAN_SPEED FAN=BedFans SPEED=0

    # If chamber temp is below 40C, heatsoak
    {% else %}
        {% if CURRENT_CHAMBER_TEMP <= 40 %}
            # if below 110C bed, set to 110, then set bed fans to 80%
            {% if BED_TEMP < 110 %}
                SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
                {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_temp=110) %}# if hotend is below 150, set to 150, then set part fan to 80%.
                {% if HOTEND_TEMP < 150 %}
                    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
                    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(hotend_temp=150) %}
                {% endif %}
                M106 S204
            {% endif %}
            SET_FAN_SPEED FAN=BedFans SPEED=0.8
            {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=0.8) %}

            # Wait for chamber to reach temp, then heatsoak for 15min
            RESPOND TYPE=echo MSG="Wait for chamber to reach {S}C."
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={S}
        {% else %}
            RESPOND TYPE=echo MSG="Chamber is pre-heated. Skipping heatsoak timer."
            
            SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
            SET_FAN_SPEED FAN=BedFans SPEED=0.40
            # Wait for chamber to reach temp, then heatsoak for 15min
            RESPOND TYPE=echo MSG="Chamber is Waiting for chamber to reach {S}C."
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={S}
            RESPOND TYPE=echo MSG="Heatsoaking for 5min"
            G4 P300000
        {% endif %}
        RESPOND TYPE=echo MSG="Setting bed fans to 20%."
        SET_FAN_SPEED FAN=BedFans SPEED=0.20
    {% endif %}
    CHAMBER_TEMP_MANAGER

[gcode_macro M191]
description: This is how gcode for chamber temp are managed by the slicer.
gcode:
    {% set S = params.S|default(0)|int %}
    {% set CURRENT_CHAMBER_TEMP = printer["temperature_sensor chamber"].temperature %}
    {% set BED_TEMP = printer.heater_bed.temperature|int %}
    {% set HOTEND_TEMP = printer.extruder.temperature|int %}

    # Home and center toolhead
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    g90
    g1 x60 y60 z30 F10000       # This is center of the V0 bed. 

    # If chamber temp is below 40C, heatsoak
    {% if CURRENT_CHAMBER_TEMP <= 40 %}
        # if below 110C bed, set to 110, then set bed fans to 80%
        {% if BED_TEMP < 110 %}
            SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
            {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_temp=110) %}
        {% endif %}
        SET_FAN_SPEED FAN=BedFans SPEED=0.8
        {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=0.8) %}

        # if hotend is below 150, set to 150, then set part fan to 80%.
        {% if HOTEND_TEMP < 150 %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
            {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(hotend_temp=150) %}
        {% endif %}
        M106 S204
        # Wait for chamber to reach temp, then heatsoak for 15min
        RESPOND TYPE=echo MSG="Chamber is Waiting for chamber to reach {S}C."
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={S}
        RESPOND TYPE=echo MSG="Heatsoaking for {printer["gcode_macro CHAMBER_MANAGER"].variable_heatsoak_duration} sec."
        G4 P{printer["gcode_macro CHAMBER_MANAGER"].heatsoak_duration}
    {% else %}
        RESPOND TYPE=echo MSG="Chamber is pre-heated. Skipping heatsoak timer."
        
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
        SET_FAN_SPEED FAN=BedFans SPEED=0.40
        # Wait for chamber to reach temp, then heatsoak for 15min
        RESPOND TYPE=echo MSG="Chamber is Waiting for chamber to reach {S}C."
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={S}
        RESPOND TYPE=echo MSG="Heatsoaking for 5min"
        G4 P300000
    {% endif %}
    CHAMBER_TEMP_MANAGER

[gcode_macro CHAMBER_HEATSOAK]
gcode:
    {% set CHAMBER = printer["gcode_macro CHAMBER_MANAGER"].target_chamber_temp %}
    {% set BED_TEMP = printer["gcode_macro CHAMBER_MANAGER"].bed_temp %}
    {% set CURRENT_CHAMBER_TEMP = printer["temperature_sensor chamber"].temperature %}
    
    RESPOND TYPE=echo MSG="Starting chamber heatsoak. Target: {CHAMBER}C"
    
    # Set bed to max safe temperature for heating
    M140 S120
    
    # Set hotend to standby temperature
    M104 S150
    
    # Turn on part cooling fan
    M106 S204  # 80% of 255
    
    # Turn on bed fans at minimum speed    
    RESPOND TYPE=echo MSG="Setting BedFans to {printer["gcode_macro CHAMBER_MANAGER"].bed_fan_min}."
    SET_FAN_SPEED FAN=BedFans SPEED={printer["gcode_macro CHAMBER_MANAGER"].bed_fan_min}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=printer["gcode_macro CHAMBER_MANAGER"].bed_fan_min) %}
    
    # Wait for bed to reach temperature
    M190 S120
    
    # Set bed fans to maximum speed
    RESPOND TYPE=echo MSG="Setting BedFans to {printer["gcode_macro CHAMBER_MANAGER"].bed_fan_max}."
    SET_FAN_SPEED FAN=BedFans SPEED={printer["gcode_macro CHAMBER_MANAGER"].bed_fan_max}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=printer["gcode_macro CHAMBER_MANAGER"].bed_fan_max) %}
    
    # Start heatsoak timer
    {% if CURRENT_CHAMBER_TEMP <= 40 %}
        RESPOND TYPE=echo MSG="Chamber is cold. Starting 15-minute heatsoak."
        UPDATE_DELAYED_GCODE ID=end_heatsoak DURATION={printer["gcode_macro CHAMBER_MANAGER"].heatsoak_duration}
    {% else %}
        RESPOND TYPE=echo MSG="Chamber is pre-heated. Skipping heatsoak timer."
        CHAMBER_TEMP_MANAGER
    {% endif %}

[delayed_gcode end_heatsoak]
gcode:
    RESPOND TYPE=echo MSG="Heatsoak complete. Starting temperature management."
    CHAMBER_TEMP_MANAGER

[gcode_macro CHAMBER_TEMP_MANAGER]
gcode:
    {% set NEW_SPEED = 0 | float %}
    {% set TARGET = printer["gcode_macro CHAMBER_MANAGER"].target_chamber_temp %}
    {% set CURRENT = printer["temperature_sensor chamber"].temperature %}
    {% set BED_FAN_SPEED = printer["gcode_macro CHAMBER_MANAGER"].bed_fan_speed %}
    {% set EXHAUST_FAN_SPEED = printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_speed %}
    {% set EXHAUST_HYSTERESIS_ON = printer["gcode_macro CHAMBER_MANAGER"].exhaust_hysteresis_on %}
    {% set EXHAUST_HYSTERESIS_OFF = printer["gcode_macro CHAMBER_MANAGER"].exhaust_hysteresis_off %}

    # Adjust bed fans
    {% if CURRENT < TARGET - 5 %}
        # Increase temperature
        {% if BED_FAN_SPEED < printer["gcode_macro CHAMBER_MANAGER"].bed_fan_max %}
            {% set NEW_SPEED = BED_FAN_SPEED + 0.1 %}
            RESPOND TYPE=echo MSG="Chamber_Temp_Manager setting bedfans to NEW_SPEED {NEW_SPEED}."
            SET_FAN_SPEED FAN=BedFans SPEED={NEW_SPEED}
            {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=NEW_SPEED) %}
        {% endif %}
    {% elif CURRENT > TARGET + 5 %}
        # Decrease temperature
        {% if BED_FAN_SPEED > printer["gcode_macro CHAMBER_MANAGER"].bed_fan_min %}
            {% set NEW_SPEED = BED_FAN_SPEED - 0.1 %}
            RESPOND TYPE=echo MSG="Chamber_Temp_Manager setting bedfans to NEW_SPEED {NEW_SPEED}."
            SET_FAN_SPEED FAN=BedFans SPEED={NEW_SPEED}
            {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_speed=NEW_SPEED) %}
        # {% else %}
        #     # If bed fans are at minimum, use exhaust fan
        #     {% if EXHAUST_FAN_SPEED < printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_max %}
        #         SET_FAN_SPEED FAN=ExhaustFan SPEED={EXHAUST_FAN_SPEED + 0.1}
        #         {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(exhaust_fan_speed=exhaust_fan_speed + 0.1) %}
        #     {% endif %}
        {% endif %}
    {% endif %}

    # # Exhaust fan hysteresis
    # {% if CURRENT > TARGET + EXHAUST_HYSTERESIS_ON %}
    #     # Turn on exhaust fan
    #     {% if EXHAUST_FAN_SPEED < printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_max %}
    #         SET_FAN_SPEED FAN=ExhaustFan SPEED={EXHAUST_FAN_SPEED + 0.1}
    #         {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(exhaust_fan_speed=exhaust_fan_speed + 0.1) %}
    #     {% endif %}
    # {% elif CURRENT < TARGET - EXHAUST_HYSTERESIS_OFF %}
    #     # Turn off exhaust fan
    #     {% if EXHAUST_FAN_SPEED > printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_min %}
    #         SET_FAN_SPEED FAN=ExhaustFan SPEED={EXHAUST_FAN_SPEED - 0.1}
    #         {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(exhaust_fan_speed=printer["gcode_macro CHAMBER_MANAGER"].EXHAUST_FAN_SPEED - 0.1) %}
    #     {% endif %}
    # {% endif %}

    # Schedule next check
    UPDATE_DELAYED_GCODE ID=chamber_temp_check DURATION=60

[delayed_gcode chamber_temp_check]
gcode:
    CHAMBER_TEMP_MANAGER

[gcode_macro CHAMBER_COOLPRINT]
gcode:
    {% set CHAMBER = printer["temperature_sensor chamber"].temperature %}
    {% set BED_TEMP = printer["gcode_macro CHAMBER_MANAGER"].bed_temp %}
  
    RESPOND TYPE=echo MSG="Preparing for cool printing. Coolprint Current chamber temp: {CHAMBER}C"
    
    # Check if exhaust is needed
    # {% if CHAMBER > 65 %}
    #     RESPOND TYPE=echo MSG="Chamber too warm. Activating exhaust fan. Setting to {printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_min}"
    #     SET_FAN_SPEED FAN=ExhaustFan SPEED={printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_min}
    #     {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(exhaust_fan_speed=printer["gcode_macro CHAMBER_MANAGER"].exhaust_fan_min) %}
    # {% endif %}
  
    # Set bed fans to minimum
    SET_FAN_SPEED FAN=BedFans SPEED={printer["gcode_macro CHAMBER_MANAGER"].bed_fan_min}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_fan_min=printer["gcode_macro CHAMBER_MANAGER"].bed_fan_min) %}
  
    # Set and wait for bed temperature
    M140 S{BED_TEMP}
    M190 S{BED_TEMP}
    {% set _dummy = printer["gcode_macro CHAMBER_MANAGER"].update(bed_temp=BED_TEMP) %}
  
    # Wait for additional 5 minutes for bed stabilization
    RESPOND TYPE=echo MSG="Waiting 5 minutes for bed temperature to stabilize."
    G4 P300000  # Wait for 5 minutes (300,000 ms)
  
    # Set hotend to standby temperature
    M104 S150
